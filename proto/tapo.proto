syntax = "proto3";

package tapo;

service Tapo {
  rpc Devices(Empty) returns (DevicesResponse);
  rpc Events(EventRequest) returns (stream EventResponse);

  rpc Reset(DeviceRequest) returns (Empty);
  rpc Info(DeviceRequest) returns (InfoResponse);
  rpc InfoJson(DeviceRequest) returns (InfoJsonResponse);
  rpc Usage(DeviceRequest) returns (UsageResponse);
  rpc On(DeviceRequest) returns (PowerResponse);
  rpc Off(DeviceRequest) returns (PowerResponse);

  rpc Set(SetRequest) returns (InfoResponse);
}

// A generic empty message for requests and responses
message Empty {}

// Subscribe to events from the server
message EventRequest {
  // Event types to subscribe to
  //
  // Important: When empty you'll be subscribing to all events
  repeated EventType types = 1;
}

// A generic request which only contains a device name under the `device` field
message DeviceRequest {
  // Name of the device for which the request should be executed
  string device = 1;
}


// Representation of a hue saturation combination to represent a color
message HueSaturation {
  // Hue value of the color
  IntegerValueChange hue = 1;
  // Saturation value of the color
  IntegerValueChange saturation = 2;
}

// Representation of an integer value which can be either absolutely or relatively changed
message IntegerValueChange {
  // Boolean whether the value is an absolute or relative change to the current value
  bool absolute = 1;
  // Absolute or relative change value
  sint32 value = 2;
}

// Request to update multiple values of a device at once
message SetRequest {
  // Name of the device which should be updated
  string device = 1;
  // Optional boolean to change the power state
  optional bool power = 2;
  // Optional new hue saturation values
  optional HueSaturation hue_saturation = 3;
  // Optional new predefined color
  optional Color color = 4;
  // Optional new brightness value
  optional IntegerValueChange brightness = 5;
  // Optional new temperature value
  optional IntegerValueChange temperature = 6;
}


// The response for any power request (on, off) which contains the current power state of the
// device in the `device_on` field
message PowerResponse {
  bool device_on = 1;
}

// Representation of a registered device on the server side
message Device {
  // String name of the device under which it was registered
  string name = 1;
  // String type of the device (e.g. L530, L520)
  string type = 2;
  // Ip address or hostname under which the device is accessible
  string address = 3;
}

// The response of the devices request which returns all devices which were registered on the server.
//
// Important: This response only contains those devices into which the server could successfully login
message DevicesResponse {
  // List of devices which are currently accessible from the server
  repeated Device devices = 1;
}

// Single event of the event stream
message EventResponse {
  // Type of the event
  EventType type = 1;
  // Body for the event which can be serialized into different objects depending on the event type
  bytes body = 2;
  // Name of the device should the event affect a device
  optional string device = 3;
}

// Representation of a rgb color
message Rgb {
  // Red value (0..255)
  uint32 red = 1;
  // Green value (0..255)
  uint32 green = 2;
  // Blue value (0..255)
  uint32 blue = 3;
}

// The response to the info request. It contains some selected fields of the info request which
// are cover the most use cases of the info request. Should any other fields be needed the `InfoJsonRequest`
// can be used to get the raw json as a response
message InfoResponse {
  // Boolean whether the device is currently running
  optional bool device_on = 1;
  // Time since when the device is on
  optional uint64 on_time = 2;
  // Boolean whether the device is currently overheated
  bool overheated = 3;
  // The current brightness level of the device
  optional uint32 brightness = 4;
  // The current hue level of the device's color
  optional uint32 hue = 5;
  // The current saturation level of the device's color
  optional uint32 saturation = 6;
  // The current color temperature of the device
  optional uint32 temperature = 7;
  // The id of the dynamic effect running on the device if any is running
  optional string dynamic_effect_id = 8;
  // The rgb color of either the temperature or the hsl values
  optional Rgb color = 9;
}

// Response for the info json request. This response contains the whole device
// info as returned from the tapo device in the `data` field in the form of a serialized
// json
message InfoJsonResponse {
  // Serialized json of the tapo device info response
  bytes data = 1;
}

// Representation for the usage of a unit in the last day, week and month
message UsagePerPeriod {
  // How much the unit was used today
  optional uint64 today = 1;
  // How much the unit was used within the last week
  optional uint64 week = 2;
  // How much the unit was used within the last month
  optional uint64 month = 3;
}

// Response to the device usage request which returns some statistics about the usage
// of time, power and power savings of the device
message UsageResponse {
  // The time the device was used in the last day, week and month
  UsagePerPeriod time_usage = 1;
  // The power which was used by the device in the last day, week and month
  UsagePerPeriod power_usage = 2;
  // The power which was saved by the device in the last day, week and month
  UsagePerPeriod saved_power = 3;
}

// Types of events sent by the event stream
enum EventType {
  // The internal state of a device has changed
  DeviceStateChange = 0;
}

// Enum representation of the Google Home colors
// supported by tapo light bulbs
enum Color {
  CoolWhite = 0;
  Daylight = 1;
  Ivory = 2;
  WarmWhite = 3;
  Incandescent = 4;
  Candlelight = 5;
  Snow = 6;
  GhostWhite = 7;
  AliceBlue = 8;
  LightGoldenrod = 9;
  LemonChiffon = 10;
  AntiqueWhite = 11;
  Gold = 12;
  Peru = 13;
  Chocolate = 14;
  SandyBrown = 15;
  Coral = 16;
  Pumpkin = 17;
  Tomato = 18;
  Vermilion = 19;
  OrangeRed = 20;
  Pink = 21;
  Crimson = 22;
  DarkRed = 23;
  HotPink = 24;
  Smitten = 25;
  MediumPurple = 26;
  BlueViolet = 27;
  Indigo = 28;
  LightSkyBlue = 29;
  CornflowerBlue = 30;
  Ultramarine = 31;
  DeepSkyBlue = 32;
  Azure = 33;
  NavyBlue = 34;
  LightTurquoise = 35;
  Aquamarine = 36;
  Turquoise = 37;
  LightGreen = 38;
  Lime = 39;
  ForestGreen = 40;
}